#include<bits/stdc++.h>
#define bst           ios_base::sync_with_stdio(0);
#define bug(x)        cerr<<#x<<'='<<x<<endl;
#define lp(i,a,b)     for(int i=a; i<=b; i++)
#define ll            long long int
#define eb            emplace_back
#define pb            push_back
using namespace std;
ll mx=200;
vector<ll> path[200];
ll pos[200], weight[200][200];
bool bfs(ll s, ll t){
    bool check[200]={}; check[s]=true;
    queue<ll> q; q.push(s);
    while(!q.empty()){
        ll x=q.front();    q.pop();
        ll limit=path[x].size();
        for(ll i=0; i<limit; i++){
            ll y=path[x][i];
            if(y==1) continue;
            if(check[y]) continue;
            if(weight[x][y]){
                check[y]=true;
                pos[y]=x;
                q.push(y);
                if(y==t) return true;
            }
        }
    }

    return false;

}
ll max_flow(ll s, ll t){
    ll total_flow=0;
    while(bfs(s, t)){
        ll y=t, min_flow=999999999999;
        while(y!=s){
            ll x=pos[y];
            min_flow=min(min_flow, weight[x][y]);
            y=x;
        }
        total_flow+=min_flow;
        y=t;
        while(y!=s){
            ll x=pos[y];
            weight[x][y]-=min_flow;
            weight[y][x]+=min_flow;
            y=x;
        }

    }
    return total_flow;

}
void clear(){
    for(ll i=0; i<mx; i++) path[i].clear();
    for(ll i=0; i<mx; i++){
        for(ll j=0; j<mx; j++) weight[i][j]=0;
    }
}
int main(){
    ll t, tc=1;
    cin>>t;
    while(t--){
        ll m, w, i, j, k;
        clear();
        scanf("%lld %lld", &m, &w);
        for(i=2; i<m; i++){
            ll cap; scanf("%lld", &cap);
            if(!cap) continue;
            path[i].eb(m+i); path[m+i].eb(i);
            weight[i][m+i]+=cap;
        }
        for(i=0; i<w; i++){
            ll u, v, cap;
            scanf("%lld %lld %lld", &u, &v, &cap);
            if(!cap) continue;
            path[u+m].eb(v); path[v+m].eb(u);
            weight[u+m][v]=weight[v+m][u]=weight[u+m][v]+cap;
        }
        ll min_cut=max_flow(1+m, m);
        printf("Case %lld: %lld\n", tc++, min_cut);
    }
    return 0;
}
