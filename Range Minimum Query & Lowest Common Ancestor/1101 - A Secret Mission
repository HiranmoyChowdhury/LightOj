/// Hiranmoy Chowdhury(SEC)


///first I did MST and then LCA






#include<bits/stdc++.h>
#define bst           ios_base::sync_with_stdio(0);
#define bug(x)        cerr<<#x<<'='<<x<<endl;
#define lp(i,a,b)     for(int i=a; i<=b; i++)
#define ll            long long int
#define eb            emplace_back
#define pb            push_back
#define inp(n)        scanf("%lld", &n);
using namespace std;
class obj{
    public :
        ll u;
        ll w;
        ll v;
};
class compare{
    public :
        bool operator () (obj &a , obj &b){
            return a.w > b.w ;
        }
};
vector<pair<ll, ll>> path[100000];
ll sp[60000][20], level[60000], mx[60000][20];
bool vis[60000];
void sparse_table(ll n, ll carry){
    ll i, j, k, limit=path[n].size();
    vis[n]=true;
    level[n]=carry;

    if(n>1){
        for(i=1; i<20; i++){
            if(sp[n][i-1]==-1) break;
            sp[n][i]=sp[sp[n][i-1]][i-1];
            mx[n][i]=max(mx[n][i-1], mx[sp[n][i-1]][i-1]);
        }
    }

    for(i=0; i<limit; i++){
        ll x=path[n][i].first, y=path[n][i].second;
        if(vis[x]) continue;
        sp[x][0]=n; mx[x][0]=y;
        sparse_table(x, carry+1);
    }
}
int main(){
    ll t;
    scanf("%lld", &t);
    for(ll cas=1; cas<=t; cas++){
        ll n, m, i, j, k;
        scanf("%lld%lld", &n, &m);
        vector<pair<ll, ll>> temp[n+1];
        for(i=0; i<m; i++){
            ll u, v, w;
            scanf("%lld%lld %lld", &u, &v, &w);
            temp[u].eb(v,w);
            temp[v].eb(u, w);
        }
        for(i=0; i<=n; i++) path[i].clear();
        priority_queue<obj,vector<obj>, compare> pq;
        i=0;
        obj kk;
        kk.u=i, kk.v=i+1, kk.w=i;
        pq.push(kk);

        bool check[n+1]={}; check[1]=true;
        while(!pq.empty()){             ///MST
            kk=pq.top();
            ll u=kk.u, w=kk.w, v=kk.v;
            pq.pop();
            if(check[v] && w) continue;
            if(w){
                check[v]=true;
                path[v].eb(u, w);
                path[u].eb(v, w);
            }
            ll limit=temp[v].size();
            for(i=0; i<limit; i++){
                ll vv=temp[v][i].first, ww=temp[v][i].second;
                if(check[vv]) continue;
                kk.u=v, kk.v=vv, kk.w=ww;
                pq.push(kk);
            }
        }
        for(i=1; i<=n; i++) for(j=0; j<20; j++) sp[i][j]=mx[i][j]=-1;
        for(i=1; i<=n; i++) vis[i]=false;
        sparse_table(1, 1);                  ///sperse table


        ll q;
        printf("Case %lld:\n", cas);
        inp(q);
        while(q--){                                     ///LCA
            ll l, r; scanf("%lld %lld", &l, &r);
            if(level[l]<level[r]) swap(l, r);
            ll ans=0;
            for(i=19; i>=0; i--){
                if(sp[l][i]!=-1 && level[sp[l][i]]>=level[r]){
                    ans=max(ans, mx[l][i]);
                    l=sp[l][i];
                }
            }
            if(l!=r){
                for(i=19; i>=0; i--){
                    if(sp[l][i]!=-1 && sp[l][i]!=sp[r][i]){
                        ans=max({ans, mx[l][i], mx[r][i]});
                        l=sp[l][i]; r=sp[r][i];
                    }
                }
                ans=max({ans, mx[l][0], mx[r][0]});

            }
            printf("%lld\n", ans);
        }
    }

    return 0;
}
